// عرض المستندات
let heads = document.querySelector(".heads");
let docsDiv = document.querySelector(".docs");
let docs = [
  // للمسافات &emsp;
  // {
  //     "الاسم": ``,
  //     "العنوان": ``,
  //     "نص_فوق": ``,
  //     "شفرة_فوق": ``,
  //     "نص_تحت": ``,
  //     "شفرة_تحت": ``,
  // },
  {
    الاسم: `تعليق`,
    العنوان: `التعليقات التوضيحية "#"`,
    نص_فوق: ``,
    شفرة_فوق: `س = 9 # هذا تعليق يوضح عمل الشفرة المكتوبة
                # تعليق في سطر فارغ `,
    نص_تحت: ``,
    شفرة_تحت: ``,
  },

  {
    الاسم: `حساب`,
    العنوان: `العمليات الحسابية`,
    نص_فوق: ``,
    شفرة_فوق: `جمع: 1 + 2 = 3 
                طرح: 9 - 3 = 6 
                ضرب: 2 * 8 = 16 
                قسمة: 9 \\ 3 = 3 
                باقي القسمة: 8 \\\\ 5 = 3 
                ناتج القسمة: 8 \\* 3 = 2 
                قوة: 4 ^ 2 = 16 
                جذر: \\^ 4 = 2 
                أولوية: (3 + 6) * 2 = 18 
                `,
    نص_تحت: ``,
    شفرة_تحت: ``,
  },

  {
    الاسم: `المقارنة`,
    العنوان: `المقارنة`,
    نص_فوق: ``,
    شفرة_فوق: `يساوي: 9 == 9 
                لا يساوي: 9 != 9 
                اكبر من: 3 > 6 
                اصغر من: 6 < 9 
                اكبر من او يساوي: 6 >= 6 
                اصغر من او يساوي: 9 <= 3 
                `,
    نص_تحت: ``,
    شفرة_تحت: ``,
  },
  {
    الاسم: `صح`,
    العنوان: `العمليات المنطقية`,
    نص_فوق: ``,
    شفرة_فوق: `و : صح و صح 
                او : صح او صح
                ليس : ليس خطا 
                `,
    نص_تحت: ``,
    شفرة_تحت: ``,
  },
  {
    الاسم: `متغير`,
    العنوان: `الإسناد`,
    نص_فوق: ``,
    شفرة_فوق: `س = 9
                س, ص = 9, 7
                `,
    نص_تحت: ``,
    شفرة_تحت: ``,
  },
  {
    الاسم: `الإسناد`,
    العنوان: `الإسناد رجعي`,
    نص_فوق: ``,
    شفرة_فوق: `س += 5
                س -= 3
                س *= 2
                س \= 7
                س ^= 3
                س \*= 7
                س \\= 9
                `,
    نص_تحت: ``,
    شفرة_تحت: ``,
  },
  {
    الاسم: `الإسناد`,
    العنوان: `الإسناد الشرطي`,
    نص_فوق: ``,
    شفرة_فوق: `س = 9 اذا 6 == 6 والا 7  
                `,
    نص_تحت: `حيث س تساوي 9 اذا تحقق الشرط وفي حال لم يتحقق الشرط س تساوي 7.`,
    شفرة_تحت: ``,
  },
  {
    الاسم: `الحذف`,
    العنوان: `الحذف`,
    نص_فوق: ``,
    شفرة_فوق: `س = 5
                احذف س 
                `,
    نص_تحت: ``,
    شفرة_تحت: ``,
  },
  {
    الاسم: `الضمنية`,
    العنوان: `الدوال الضمنية`,
    نص_فوق: ``,
    شفرة_فوق: `ادخل("نص هنا: ") 
                اطبع("نص هنااو متغير") 
                اقصى(2, 9) 
                ادنى(3, 7)
                `,
    نص_تحت: `الدوال الضمنية هي مجموعة من الدوال المضمنة في اللغة نفسها، ومع ذلك من الممكن كتابة دالة فوقها.`,
    شفرة_تحت: ``,
  },
  {
    الاسم: `النصوص`,
    العنوان: `النصوص`,
    نص_فوق: ``,
    شفرة_فوق: `س = "هذا نص عادي"
                س = م"هذا نص منسق حيث يمكن تمرير عمليات فيه من خلال {7 + 9} القوسين المتعرجين"
                `,
    نص_تحت: `كما نلاحظ حيث أنه يوجد نص عادي ونص منسق والذي يقبل تمرير حالات بسيطة ضمن القوسين المتعرجين`,
    شفرة_تحت: ``,
  },

  {
    الاسم: `مصفوفة`,
    العنوان: `مصفوفة`,
    نص_فوق: ``,
    شفرة_فوق: `س = [5, "سلام", صح]
                س.اضف(7)
                س.امسح("سلام")
                س.ادرج(0, 99)
                س[2]
                س = [9 لاجل _ في مدى(9)]
                `,
    نص_تحت: `حيث س.اضف(7) يقوم بإضافة عدد 7 الى نهاية المصفوفة س.امسح("سلام") يقوم بمسح او حذف العنصر "سلام" من المصفوفة س.ادرج(0, 99) يقوم بإدراج العدد 99 في موقع المؤشر 0 أي اول عنصر س[2] الوصول لقيمة العنصر الثالث. س = [9 لاجل _ في مدى(9)] هذه الحالة تسمى المصفوفة الضمنية حيث يتم إنشاء مصفوفة عن طريق حالة تكرار خاصية التكرار خلال المصفوفة, حيث يتم التكرار عبر القيم.
          `,
    شفرة_تحت: ``,
  },
  {
    الاسم: `مترابطة`,
    العنوان: `مترابطة`,
    نص_فوق: ``,
    شفرة_فوق: `س = 3, 5, 7
                س = (5, 7, 9)
                `,
    نص_تحت: `خاصية التكرار خلال المترابطة, حيث يتم التكرار عبر القيم.`,
    شفرة_تحت: ``,
  },
  {
    الاسم: `مفاتيح`,
    العنوان: `فهرس`,
    نص_فوق: ``,
    شفرة_فوق: `س = {"أ": 5, "ب": 7, "ت": 9}
                س.مفاتيح()
                `,
    نص_تحت: `حيث س.مفاتيح() تقوم بإرجاع مفاتيح الفهرس. خاصية التكرار خلال الفهرس, حيث يتم التكرار عبر المفاتيح وليس القيم.`,
    شفرة_تحت: ``,
  },
  {
    الاسم: `استورد`,
    العنوان: `الاستيراد`,
    نص_فوق: ``,
    شفرة_فوق: `استورد مثال
                `,
    نص_تحت: `حيث يمكن استيراد ملفات ذات لاحقة .alifl في الوقت الحالي وسيتم تعديل ذلك لاحقا عندما يتم استيراد مكتبة يتم تنفيذها وعند إعادة استيرادها لا يتم تنفيذها مرة اخرى`,
    شفرة_تحت: ``,
  },
  {
    الاسم: `الاستيراد`,
    العنوان: `المكتبات الضمنية`,
    نص_فوق: `المكتبات الضمنية وهي المكتبات الداخلية الخاصة بلغة ألف`,
    شفرة_فوق: `الزمن
                الزمن.غفوة(9)  --> حيث يأخذ الممر الحالي غفوة لمدة 9 ثواني

                الرياضيات
                الرياضيات.جيب(30)
                الرياضيات.تجيب(60)
                الرياضيات.ظل(90) --> النتيجة تحسب بالراديان
                `,
    نص_تحت: ``,
    شفرة_تحت: ``,
  },
  {
    الاسم: `اذا`,
    العنوان: `حالة "اذا"`,
    نص_فوق: ``,
    شفرة_فوق: `س = 6
                اذا س > 9:
              &emsp;  اطبع("س أكبر من 9")
                اواذا س == 9:
              &emsp;  اطبع("س تساوي 9") 
                والا:
              &emsp;  اطبع("س ليست اكبر من 9 ولا تساويها")
                `,
    نص_تحت: ``,
    شفرة_تحت: ``,
  },
  {
    الاسم: `لاجل`,
    العنوان: `حالة "لاجل"`,
    نص_فوق: `في هذا المثال يتم عمل حلقة "لاجل" لتنفيذ برنامج يطبع قيمة ب .
            حيث تبدأ الحلقة بالعدد 0 وتقوم بإسناده إلى المتغير ب ومن ثم تنفذ جسم الحلقة.
            يتكرر الأمر حتى وصول الحلقة إلى العدد 9 - وهو العاشر لأن الحلقة بدأت من 0 - وبالتالي يتوقف التنفيذ.`,
    شفرة_فوق: `لاجل ب في مدى(10):
                &emsp; اطبع(ب)
                `,
    نص_تحت: `سيتم إسناد 20 إلى المتغير ب ومن ثم يقوم بتنفيذ الحلقة.
                بعد الإنتهاء سيتم إسناد 22 إلى المتغير ب وذلك لأن عدد التزايد المحدد هو 2.
                وهكذا حتى يصل المتغير ب الى العدد 100.`,
    شفرة_تحت: `لاجل ب في مدى(2,100,20):
                  &emsp; اطبع(ب)`,
  },
  {
    الاسم: `بينما`,
    العنوان: `حالة "بينما"`,
    نص_فوق: ``,
    شفرة_فوق: `س = 1
                بينما س < 10:
                &emsp; اذا س == 4:
                &emsp;&emsp; س += 3
                &emsp;&emsp; استمر
                &emsp; اواذا س == 9:
                &emsp;&emsp; توقف
                &emsp; اطبع(س)
                &emsp; س += 1`,
    نص_تحت: `سيتم التحقق من الشرط (س < 10) ، إذا كان صحيحاً سيتم تنفيذ جسم الحالة.
            اذا كانت س تساوي 4 فإن استمر لن تكمل باقي الجسم وسيعود للتحقق من س في بداية الحالة بينما واذا كانت س تساوي 9 سيقوم بالتوقف عن التكرار والخروج من الحالة بينما`,
    شفرة_تحت: ``,
  },
  {
    الاسم: "دالة",
    العنوان: "تعريف الدالة",
    نص_فوق: ``,
    نص_تحت: `في هذا المثال تم توضيح تعريف الدالة مع تمرير معاملان أحدهما لا يمتلك قيمة افتراضية والآخر يمتلك قيمة افتراضية. <br>
                كما أنه تم توضيح طريقة إرجاع قيمة من الدالة. <br>
                والمثال عبارة عن دالة لحساب السرعة في حال تحديد قيمة المسافة المقطوعة والزمن. <br>
                وفي حال عدم تحديد قيمة الزمن فإن الدالة ستقوم بإستخدام القيمة الإفتراضية الممررة. <br>
                `,
    شفرة_فوق: `دالة السرعة(المسافة, الزمن = 1): 
                  &emsp; ارجع المسافة \\ الزمن 
            
                سرعة_سقوط_الكرة = السرعة(10, 5) 

                اطبع(سرعة_سقوط_الكرة)`,
    شفرة_تحت: `دالة السرعة(ش = 6): 
                  &emsp; اطبع(ش) 
                  &emsp; لاجل ص في (5, 7, 9): 
                  &emsp;&emsp; اذا ص ==  9: 
                  &emsp;&emsp;&emsp; توقف 
                  &emsp; ارجع ص
            
                اطبع(السرعة(7)) `,
  },
  {
    الاسم: "صنف",
    العنوان: "تعريف صنف",
    نص_فوق: ``,
    نص_تحت: `في هذا المثال تم تعريف صنف من نوع مخروط وتم تمرير صنف ككائن ضمن صنف اخر. تتم تهيئة الصنف عن طريق دالة خاصة تدعى _تهيئة_`,
    شفرة_فوق: `صنف مخروط_علوي:
                نق_القاعدة = 0
                الارتفاع = 0
                بي = 0

                دالة _تهيئة_(هذا, نق = 1, ع = 1):	
                &emsp; هذا.نق_القاعدة = نق
                &emsp; هذا.الارتفاع = ع
                &emsp; هذا.بي = 3.14

                دالة مساحة_القاعدة(هذا):
                &emsp; م_القاعدة = 2 * هذا.بي * هذا.نق_القاعدة * هذا.الارتفاع
                &emsp; ارجع م_القاعدة

                دالة حجم_المخروط(هذا):
                &emsp; ارجع هذا.مساحة_القاعدة() * هذا.الارتفاع \ 3

              صنف مخروط_سفلي:
              &emsp; نق_القاعدة = 0
              &emsp; الارتفاع = 0
              &emsp; بي = 0
              &emsp; مخروط_ع = عدم

                دالة _تهيئة_(هذا, نق = 1, ع = 1, مخروط_ع = عدم):	
                &emsp; هذا.نق_القاعدة = نق
                &emsp; هذا.الارتفاع = ع
                &emsp; هذا.بي = 3.14
                &emsp; هذا.مخروط_ع = مخروط_ع

                دالة مساحة_القاعدة(هذا):
                &emsp; م_القاعدة = 2 * هذا.بي * هذا.نق_القاعدة * هذا.الارتفاع
                &emsp; ارجع م_القاعدة

                دالة حجم_المخروط(هذا):
                &emsp; ارجع هذا.مساحة_القاعدة() * هذا.الارتفاع \ 3

                دالة مح_المخروطين(هذا):
                &emsp; ارجع هذا.حجم_المخروط() + هذا.مخروط_ع.حجم_المخروط()
                
              مخروط_ع = مخروط_علوي(2, 2)
              مخروط_س = مخروط_سفلي(3, 4, مخروط_ع)

              ح_المخاريط= مخروط_س.مح_المخروطين()

              اطبع(مخروط_ع.حجم_المخروط(), مخروط_س.حجم_المخروط(), ح_المخاريط)`,
    شفرة_تحت: ``,
  },
  {
    الاسم: `تحويل النوع`,
    العنوان: `تحويل النوع`,
    نص_فوق: ``,
    شفرة_فوق: `س = صحيح("1")
                س = عشري("0.5")`,
    نص_تحت: ``,
    شفرة_تحت: ``,
  },
  {
    الاسم: `حالات خاصة`,
    العنوان: `حالات خاصة`,
    نص_فوق: `حيث الاولى ترجع قيمة عدد لانهائي موجب والثانية ترجع قيمة عدد لانهائي سالب`,
    شفرة_فوق: `س = عشري("لانهائي")
                س = عشري("-لانهائي")`,
    نص_تحت: `حيث الحالة الاولى ترجع خطأ لان 7 ليست في المصفوفة والثانية ترجع صح لان 7 ليست في المصفوفة`,
    شفرة_تحت: `س = 7 في [3, 2, 9]
                س = 7 ليس في [4, 8, 3]`,
  },
];

for (let i = 0; i < docs.length; i++) {
  let doc = docs[i];

  heads.innerHTML +=
    `<a href="#` +
    doc.الاسم +
    `"><h3 dir="rtl">` +
    (i + 1) +
    `. ` +
    doc.العنوان +
    `</h3></a>`;

  let نص_فوق = doc.نص_فوق?.trim() ? `<p dir="rtl">${doc.نص_فوق}</p>` : "";
  let شفرة_فوق = doc.شفرة_فوق?.trim()
    ? `<div class="code">${doc.شفرة_فوق}</div>`
    : "";
  let نص_تحت = doc.نص_تحت?.trim() ? `<p dir="rtl">${doc.نص_تحت}</p>` : "";
  let شفرة_تحت = doc.شفرة_تحت?.trim()
    ? `<div class="code">${doc.شفرة_تحت}</div>`
    : "";

  if (نص_فوق || شفرة_فوق || نص_تحت || شفرة_تحت) {
    docsDiv.innerHTML += `
      <div class="sec" dir="rtl" id="${doc.الاسم}">
          <h4>${i + 1}. ${doc.العنوان}:</h4>
          ${نص_فوق}
          ${شفرة_فوق}
          ${نص_تحت}
          ${شفرة_تحت}
          <br>
          <hr>
      </div>`;
  }
}

// تلوين الشفرة
function highlightAlif(code) {
  let patterns = [
    { txt: /#.*$/gm, className: "comment" },
    { txt: /\b\d+(\.\d+)?\b/g, className: "number" },
    { txt: /م?"[^"]*"|'[^']*'/g, className: "string" },
    { txt: /(?<!\w)(صح|خطا)(?!\w)/g, className: "boolean" },
    {
      txt: /(?<!\w)(دالة|اذا|استورد|ارجع|بينما|لاجل|استمر|توقف|احذف|اواذا|والا|صنف|الرياضيات|نوع)(?!\w)/g,
      className: "keyword",
    },
    {
      txt: /(\+=|-=|\*=|\/=|\^=|==|!=|<|>|\+|- |\*|\\|\^|=| و | او | ليس )/g,
      className: "operator",
    },
    {
      txt: /([ء-يA-Za-z_][ء-يA-Za-z0-9_]*)\s*(?=\()/g,
      className: "function",
    },
  ];

  let matches = [];

  patterns.forEach(({ txt, className }) => {
    let match;
    while ((match = txt.exec(code)) !== null) {
      matches.push({
        index: match.index,
        length: match[0].length,
        replacement: `<span class="${className}">${match[0]}</span>`,
      });
    }
  });

  matches.sort((a, b) => a.index - b.index);

  let highlightedCode = "";
  let lastIndex = 0;
  matches.forEach(({ index, length, replacement }) => {
    highlightedCode += code.substring(lastIndex, index) + replacement;
    lastIndex = index + length;
  });
  highlightedCode += code.substring(lastIndex);

  return highlightedCode.replace(/\n/g, "<br>");
}

document.addEventListener("DOMContentLoaded", () => {
  document.querySelectorAll(".code").forEach((block) => {
    block.innerHTML = highlightAlif(block.innerHTML);
  });
});
